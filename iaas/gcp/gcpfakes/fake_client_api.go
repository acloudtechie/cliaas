// This file was generated by counterfeiter
package gcpfakes

import (
	"sync"

	"github.com/pivotal-cf/cliaas/iaas"
	"github.com/pivotal-cf/cliaas/iaas/gcp"
	compute "google.golang.org/api/compute/v1"
)

type FakeClientAPI struct {
	CreateVMStub        func(instance compute.Instance) error
	createVMMutex       sync.RWMutex
	createVMArgsForCall []struct {
		instance compute.Instance
	}
	createVMReturns struct {
		result1 error
	}
	DeleteVMStub        func(instanceName string) error
	deleteVMMutex       sync.RWMutex
	deleteVMArgsForCall []struct {
		instanceName string
	}
	deleteVMReturns struct {
		result1 error
	}
	GetVMInfoStub        func(filter iaas.Filter) (*compute.Instance, error)
	getVMInfoMutex       sync.RWMutex
	getVMInfoArgsForCall []struct {
		filter iaas.Filter
	}
	getVMInfoReturns struct {
		result1 *compute.Instance
		result2 error
	}
	StopVMStub        func(instanceName string) error
	stopVMMutex       sync.RWMutex
	stopVMArgsForCall []struct {
		instanceName string
	}
	stopVMReturns struct {
		result1 error
	}
}

func (fake *FakeClientAPI) CreateVM(instance compute.Instance) error {
	fake.createVMMutex.Lock()
	fake.createVMArgsForCall = append(fake.createVMArgsForCall, struct {
		instance compute.Instance
	}{instance})
	fake.createVMMutex.Unlock()
	if fake.CreateVMStub != nil {
		return fake.CreateVMStub(instance)
	} else {
		return fake.createVMReturns.result1
	}
}

func (fake *FakeClientAPI) CreateVMCallCount() int {
	fake.createVMMutex.RLock()
	defer fake.createVMMutex.RUnlock()
	return len(fake.createVMArgsForCall)
}

func (fake *FakeClientAPI) CreateVMArgsForCall(i int) compute.Instance {
	fake.createVMMutex.RLock()
	defer fake.createVMMutex.RUnlock()
	return fake.createVMArgsForCall[i].instance
}

func (fake *FakeClientAPI) CreateVMReturns(result1 error) {
	fake.CreateVMStub = nil
	fake.createVMReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClientAPI) DeleteVM(instanceName string) error {
	fake.deleteVMMutex.Lock()
	fake.deleteVMArgsForCall = append(fake.deleteVMArgsForCall, struct {
		instanceName string
	}{instanceName})
	fake.deleteVMMutex.Unlock()
	if fake.DeleteVMStub != nil {
		return fake.DeleteVMStub(instanceName)
	} else {
		return fake.deleteVMReturns.result1
	}
}

func (fake *FakeClientAPI) DeleteVMCallCount() int {
	fake.deleteVMMutex.RLock()
	defer fake.deleteVMMutex.RUnlock()
	return len(fake.deleteVMArgsForCall)
}

func (fake *FakeClientAPI) DeleteVMArgsForCall(i int) string {
	fake.deleteVMMutex.RLock()
	defer fake.deleteVMMutex.RUnlock()
	return fake.deleteVMArgsForCall[i].instanceName
}

func (fake *FakeClientAPI) DeleteVMReturns(result1 error) {
	fake.DeleteVMStub = nil
	fake.deleteVMReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClientAPI) GetVMInfo(filter iaas.Filter) (*compute.Instance, error) {
	fake.getVMInfoMutex.Lock()
	fake.getVMInfoArgsForCall = append(fake.getVMInfoArgsForCall, struct {
		filter iaas.Filter
	}{filter})
	fake.getVMInfoMutex.Unlock()
	if fake.GetVMInfoStub != nil {
		return fake.GetVMInfoStub(filter)
	} else {
		return fake.getVMInfoReturns.result1, fake.getVMInfoReturns.result2
	}
}

func (fake *FakeClientAPI) GetVMInfoCallCount() int {
	fake.getVMInfoMutex.RLock()
	defer fake.getVMInfoMutex.RUnlock()
	return len(fake.getVMInfoArgsForCall)
}

func (fake *FakeClientAPI) GetVMInfoArgsForCall(i int) iaas.Filter {
	fake.getVMInfoMutex.RLock()
	defer fake.getVMInfoMutex.RUnlock()
	return fake.getVMInfoArgsForCall[i].filter
}

func (fake *FakeClientAPI) GetVMInfoReturns(result1 *compute.Instance, result2 error) {
	fake.GetVMInfoStub = nil
	fake.getVMInfoReturns = struct {
		result1 *compute.Instance
		result2 error
	}{result1, result2}
}

func (fake *FakeClientAPI) StopVM(instanceName string) error {
	fake.stopVMMutex.Lock()
	fake.stopVMArgsForCall = append(fake.stopVMArgsForCall, struct {
		instanceName string
	}{instanceName})
	fake.stopVMMutex.Unlock()
	if fake.StopVMStub != nil {
		return fake.StopVMStub(instanceName)
	} else {
		return fake.stopVMReturns.result1
	}
}

func (fake *FakeClientAPI) StopVMCallCount() int {
	fake.stopVMMutex.RLock()
	defer fake.stopVMMutex.RUnlock()
	return len(fake.stopVMArgsForCall)
}

func (fake *FakeClientAPI) StopVMArgsForCall(i int) string {
	fake.stopVMMutex.RLock()
	defer fake.stopVMMutex.RUnlock()
	return fake.stopVMArgsForCall[i].instanceName
}

func (fake *FakeClientAPI) StopVMReturns(result1 error) {
	fake.StopVMStub = nil
	fake.stopVMReturns = struct {
		result1 error
	}{result1}
}

var _ gcp.ClientAPI = new(FakeClientAPI)
