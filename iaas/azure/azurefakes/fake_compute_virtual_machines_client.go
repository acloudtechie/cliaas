// This file was generated by counterfeiter
package azurefakes

import (
	"sync"

	"github.com/Azure/azure-sdk-for-go/arm/compute"
	"github.com/Azure/go-autorest/autorest"
	"github.com/pivotal-cf/cliaas/iaas/azure"
)

type FakeComputeVirtualMachinesClient struct {
	DeallocateStub        func(resourceGroupName string, vmName string, cancel <-chan struct{}) (result autorest.Response, err error)
	deallocateMutex       sync.RWMutex
	deallocateArgsForCall []struct {
		resourceGroupName string
		vmName            string
		cancel            <-chan struct{}
	}
	deallocateReturns struct {
		result1 autorest.Response
		result2 error
	}
	deallocateReturnsOnCall map[int]struct {
		result1 autorest.Response
		result2 error
	}
	ListStub        func(resourceGroupName string) (result compute.VirtualMachineListResult, err error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		resourceGroupName string
	}
	listReturns struct {
		result1 compute.VirtualMachineListResult
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 compute.VirtualMachineListResult
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeComputeVirtualMachinesClient) Deallocate(resourceGroupName string, vmName string, cancel <-chan struct{}) (result autorest.Response, err error) {
	fake.deallocateMutex.Lock()
	ret, specificReturn := fake.deallocateReturnsOnCall[len(fake.deallocateArgsForCall)]
	fake.deallocateArgsForCall = append(fake.deallocateArgsForCall, struct {
		resourceGroupName string
		vmName            string
		cancel            <-chan struct{}
	}{resourceGroupName, vmName, cancel})
	fake.recordInvocation("Deallocate", []interface{}{resourceGroupName, vmName, cancel})
	fake.deallocateMutex.Unlock()
	if fake.DeallocateStub != nil {
		return fake.DeallocateStub(resourceGroupName, vmName, cancel)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deallocateReturns.result1, fake.deallocateReturns.result2
}

func (fake *FakeComputeVirtualMachinesClient) DeallocateCallCount() int {
	fake.deallocateMutex.RLock()
	defer fake.deallocateMutex.RUnlock()
	return len(fake.deallocateArgsForCall)
}

func (fake *FakeComputeVirtualMachinesClient) DeallocateArgsForCall(i int) (string, string, <-chan struct{}) {
	fake.deallocateMutex.RLock()
	defer fake.deallocateMutex.RUnlock()
	return fake.deallocateArgsForCall[i].resourceGroupName, fake.deallocateArgsForCall[i].vmName, fake.deallocateArgsForCall[i].cancel
}

func (fake *FakeComputeVirtualMachinesClient) DeallocateReturns(result1 autorest.Response, result2 error) {
	fake.DeallocateStub = nil
	fake.deallocateReturns = struct {
		result1 autorest.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeComputeVirtualMachinesClient) DeallocateReturnsOnCall(i int, result1 autorest.Response, result2 error) {
	fake.DeallocateStub = nil
	if fake.deallocateReturnsOnCall == nil {
		fake.deallocateReturnsOnCall = make(map[int]struct {
			result1 autorest.Response
			result2 error
		})
	}
	fake.deallocateReturnsOnCall[i] = struct {
		result1 autorest.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeComputeVirtualMachinesClient) List(resourceGroupName string) (result compute.VirtualMachineListResult, err error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		resourceGroupName string
	}{resourceGroupName})
	fake.recordInvocation("List", []interface{}{resourceGroupName})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(resourceGroupName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listReturns.result1, fake.listReturns.result2
}

func (fake *FakeComputeVirtualMachinesClient) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeComputeVirtualMachinesClient) ListArgsForCall(i int) string {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.listArgsForCall[i].resourceGroupName
}

func (fake *FakeComputeVirtualMachinesClient) ListReturns(result1 compute.VirtualMachineListResult, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 compute.VirtualMachineListResult
		result2 error
	}{result1, result2}
}

func (fake *FakeComputeVirtualMachinesClient) ListReturnsOnCall(i int, result1 compute.VirtualMachineListResult, result2 error) {
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 compute.VirtualMachineListResult
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 compute.VirtualMachineListResult
		result2 error
	}{result1, result2}
}

func (fake *FakeComputeVirtualMachinesClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deallocateMutex.RLock()
	defer fake.deallocateMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeComputeVirtualMachinesClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ azure.ComputeVirtualMachinesClient = new(FakeComputeVirtualMachinesClient)
