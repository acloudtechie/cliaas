// This file was generated by counterfeiter
package awsfakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/ec2"
	"github.com/c0-ops/cliaas/iaas/aws"
)

type FakeAWSClient struct {
	ListStub        func(instanceNameRegex, vpcName string) ([]*ec2.Instance, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		instanceNameRegex string
		vpcName           string
	}
	listReturns struct {
		result1 []*ec2.Instance
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAWSClient) List(instanceNameRegex string, vpcName string) ([]*ec2.Instance, error) {
	fake.listMutex.Lock()
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		instanceNameRegex string
		vpcName           string
	}{instanceNameRegex, vpcName})
	fake.recordInvocation("List", []interface{}{instanceNameRegex, vpcName})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(instanceNameRegex, vpcName)
	} else {
		return fake.listReturns.result1, fake.listReturns.result2
	}
}

func (fake *FakeAWSClient) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeAWSClient) ListArgsForCall(i int) (string, string) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.listArgsForCall[i].instanceNameRegex, fake.listArgsForCall[i].vpcName
}

func (fake *FakeAWSClient) ListReturns(result1 []*ec2.Instance, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []*ec2.Instance
		result2 error
	}{result1, result2}
}

func (fake *FakeAWSClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAWSClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ aws.AWSClient = new(FakeAWSClient)
