// This file was generated by counterfeiter
package awsfakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/ec2"
	"github.com/c0-ops/cliaas/iaas/aws"
)

type FakeAWSClient struct {
	ListStub        func(instanceNameRegex, vpcName string) ([]*ec2.Instance, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		instanceNameRegex string
		vpcName           string
	}
	listReturns struct {
		result1 []*ec2.Instance
		result2 error
	}
	StopStub        func(instanceID string) error
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
		instanceID string
	}
	stopReturns struct {
		result1 error
	}
	DeleteStub        func(instanceID string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		instanceID string
	}
	deleteReturns struct {
		result1 error
	}
	CreateStub        func(ami, vmType, name, keyPairName, subnetID, securityGroupID string) (*ec2.Instance, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		ami             string
		vmType          string
		name            string
		keyPairName     string
		subnetID        string
		securityGroupID string
	}
	createReturns struct {
		result1 *ec2.Instance
		result2 error
	}
	AssociateElasticIPStub        func(instanceID, elasticIP string) error
	associateElasticIPMutex       sync.RWMutex
	associateElasticIPArgsForCall []struct {
		instanceID string
		elasticIP  string
	}
	associateElasticIPReturns struct {
		result1 error
	}
	DescribeInstancesStub        func(*ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error)
	describeInstancesMutex       sync.RWMutex
	describeInstancesArgsForCall []struct {
		arg1 *ec2.DescribeInstancesInput
	}
	describeInstancesReturns struct {
		result1 *ec2.DescribeInstancesOutput
		result2 error
	}
	DescribeInstanceStatusStub        func(input *ec2.DescribeInstanceStatusInput) (*ec2.DescribeInstanceStatusOutput, error)
	describeInstanceStatusMutex       sync.RWMutex
	describeInstanceStatusArgsForCall []struct {
		input *ec2.DescribeInstanceStatusInput
	}
	describeInstanceStatusReturns struct {
		result1 *ec2.DescribeInstanceStatusOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAWSClient) List(instanceNameRegex string, vpcName string) ([]*ec2.Instance, error) {
	fake.listMutex.Lock()
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		instanceNameRegex string
		vpcName           string
	}{instanceNameRegex, vpcName})
	fake.recordInvocation("List", []interface{}{instanceNameRegex, vpcName})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(instanceNameRegex, vpcName)
	} else {
		return fake.listReturns.result1, fake.listReturns.result2
	}
}

func (fake *FakeAWSClient) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeAWSClient) ListArgsForCall(i int) (string, string) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.listArgsForCall[i].instanceNameRegex, fake.listArgsForCall[i].vpcName
}

func (fake *FakeAWSClient) ListReturns(result1 []*ec2.Instance, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []*ec2.Instance
		result2 error
	}{result1, result2}
}

func (fake *FakeAWSClient) Stop(instanceID string) error {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
		instanceID string
	}{instanceID})
	fake.recordInvocation("Stop", []interface{}{instanceID})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		return fake.StopStub(instanceID)
	} else {
		return fake.stopReturns.result1
	}
}

func (fake *FakeAWSClient) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *FakeAWSClient) StopArgsForCall(i int) string {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return fake.stopArgsForCall[i].instanceID
}

func (fake *FakeAWSClient) StopReturns(result1 error) {
	fake.StopStub = nil
	fake.stopReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAWSClient) Delete(instanceID string) error {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		instanceID string
	}{instanceID})
	fake.recordInvocation("Delete", []interface{}{instanceID})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(instanceID)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeAWSClient) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeAWSClient) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].instanceID
}

func (fake *FakeAWSClient) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAWSClient) Create(ami string, vmType string, name string, keyPairName string, subnetID string, securityGroupID string) (*ec2.Instance, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		ami             string
		vmType          string
		name            string
		keyPairName     string
		subnetID        string
		securityGroupID string
	}{ami, vmType, name, keyPairName, subnetID, securityGroupID})
	fake.recordInvocation("Create", []interface{}{ami, vmType, name, keyPairName, subnetID, securityGroupID})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(ami, vmType, name, keyPairName, subnetID, securityGroupID)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeAWSClient) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeAWSClient) CreateArgsForCall(i int) (string, string, string, string, string, string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].ami, fake.createArgsForCall[i].vmType, fake.createArgsForCall[i].name, fake.createArgsForCall[i].keyPairName, fake.createArgsForCall[i].subnetID, fake.createArgsForCall[i].securityGroupID
}

func (fake *FakeAWSClient) CreateReturns(result1 *ec2.Instance, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *ec2.Instance
		result2 error
	}{result1, result2}
}

func (fake *FakeAWSClient) AssociateElasticIP(instanceID string, elasticIP string) error {
	fake.associateElasticIPMutex.Lock()
	fake.associateElasticIPArgsForCall = append(fake.associateElasticIPArgsForCall, struct {
		instanceID string
		elasticIP  string
	}{instanceID, elasticIP})
	fake.recordInvocation("AssociateElasticIP", []interface{}{instanceID, elasticIP})
	fake.associateElasticIPMutex.Unlock()
	if fake.AssociateElasticIPStub != nil {
		return fake.AssociateElasticIPStub(instanceID, elasticIP)
	} else {
		return fake.associateElasticIPReturns.result1
	}
}

func (fake *FakeAWSClient) AssociateElasticIPCallCount() int {
	fake.associateElasticIPMutex.RLock()
	defer fake.associateElasticIPMutex.RUnlock()
	return len(fake.associateElasticIPArgsForCall)
}

func (fake *FakeAWSClient) AssociateElasticIPArgsForCall(i int) (string, string) {
	fake.associateElasticIPMutex.RLock()
	defer fake.associateElasticIPMutex.RUnlock()
	return fake.associateElasticIPArgsForCall[i].instanceID, fake.associateElasticIPArgsForCall[i].elasticIP
}

func (fake *FakeAWSClient) AssociateElasticIPReturns(result1 error) {
	fake.AssociateElasticIPStub = nil
	fake.associateElasticIPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAWSClient) DescribeInstances(arg1 *ec2.DescribeInstancesInput) (*ec2.DescribeInstancesOutput, error) {
	fake.describeInstancesMutex.Lock()
	fake.describeInstancesArgsForCall = append(fake.describeInstancesArgsForCall, struct {
		arg1 *ec2.DescribeInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeInstances", []interface{}{arg1})
	fake.describeInstancesMutex.Unlock()
	if fake.DescribeInstancesStub != nil {
		return fake.DescribeInstancesStub(arg1)
	} else {
		return fake.describeInstancesReturns.result1, fake.describeInstancesReturns.result2
	}
}

func (fake *FakeAWSClient) DescribeInstancesCallCount() int {
	fake.describeInstancesMutex.RLock()
	defer fake.describeInstancesMutex.RUnlock()
	return len(fake.describeInstancesArgsForCall)
}

func (fake *FakeAWSClient) DescribeInstancesArgsForCall(i int) *ec2.DescribeInstancesInput {
	fake.describeInstancesMutex.RLock()
	defer fake.describeInstancesMutex.RUnlock()
	return fake.describeInstancesArgsForCall[i].arg1
}

func (fake *FakeAWSClient) DescribeInstancesReturns(result1 *ec2.DescribeInstancesOutput, result2 error) {
	fake.DescribeInstancesStub = nil
	fake.describeInstancesReturns = struct {
		result1 *ec2.DescribeInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeAWSClient) DescribeInstanceStatus(input *ec2.DescribeInstanceStatusInput) (*ec2.DescribeInstanceStatusOutput, error) {
	fake.describeInstanceStatusMutex.Lock()
	fake.describeInstanceStatusArgsForCall = append(fake.describeInstanceStatusArgsForCall, struct {
		input *ec2.DescribeInstanceStatusInput
	}{input})
	fake.recordInvocation("DescribeInstanceStatus", []interface{}{input})
	fake.describeInstanceStatusMutex.Unlock()
	if fake.DescribeInstanceStatusStub != nil {
		return fake.DescribeInstanceStatusStub(input)
	} else {
		return fake.describeInstanceStatusReturns.result1, fake.describeInstanceStatusReturns.result2
	}
}

func (fake *FakeAWSClient) DescribeInstanceStatusCallCount() int {
	fake.describeInstanceStatusMutex.RLock()
	defer fake.describeInstanceStatusMutex.RUnlock()
	return len(fake.describeInstanceStatusArgsForCall)
}

func (fake *FakeAWSClient) DescribeInstanceStatusArgsForCall(i int) *ec2.DescribeInstanceStatusInput {
	fake.describeInstanceStatusMutex.RLock()
	defer fake.describeInstanceStatusMutex.RUnlock()
	return fake.describeInstanceStatusArgsForCall[i].input
}

func (fake *FakeAWSClient) DescribeInstanceStatusReturns(result1 *ec2.DescribeInstanceStatusOutput, result2 error) {
	fake.DescribeInstanceStatusStub = nil
	fake.describeInstanceStatusReturns = struct {
		result1 *ec2.DescribeInstanceStatusOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeAWSClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.associateElasticIPMutex.RLock()
	defer fake.associateElasticIPMutex.RUnlock()
	fake.describeInstancesMutex.RLock()
	defer fake.describeInstancesMutex.RUnlock()
	fake.describeInstanceStatusMutex.RLock()
	defer fake.describeInstanceStatusMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAWSClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ aws.AWSClient = new(FakeAWSClient)
