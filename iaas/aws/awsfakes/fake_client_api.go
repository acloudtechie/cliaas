// This file was generated by counterfeiter
package awsfakes

import (
	"sync"

	"github.com/aws/aws-sdk-go/service/ec2"
	"github.com/c0-ops/cliaas/iaas/aws"
)

type FakeClientAPI struct {
	CreateVMStub        func(instance ec2.Instance, ami, instanceType, newName string) (*ec2.Instance, error)
	createVMMutex       sync.RWMutex
	createVMArgsForCall []struct {
		instance     ec2.Instance
		ami          string
		instanceType string
		newName      string
	}
	createVMReturns struct {
		result1 *ec2.Instance
		result2 error
	}
	DeleteVMStub        func(instance ec2.Instance) error
	deleteVMMutex       sync.RWMutex
	deleteVMArgsForCall []struct {
		instance ec2.Instance
	}
	deleteVMReturns struct {
		result1 error
	}
	GetVMInfoStub        func(name string) (*ec2.Instance, error)
	getVMInfoMutex       sync.RWMutex
	getVMInfoArgsForCall []struct {
		name string
	}
	getVMInfoReturns struct {
		result1 *ec2.Instance
		result2 error
	}
	StopVMStub        func(instance ec2.Instance) error
	stopVMMutex       sync.RWMutex
	stopVMArgsForCall []struct {
		instance ec2.Instance
	}
	stopVMReturns struct {
		result1 error
	}
	AssignPublicIPStub        func(instance ec2.Instance, ip string) error
	assignPublicIPMutex       sync.RWMutex
	assignPublicIPArgsForCall []struct {
		instance ec2.Instance
		ip       string
	}
	assignPublicIPReturns struct {
		result1 error
	}
	WaitForStartedVMStub        func(instanceName string) error
	waitForStartedVMMutex       sync.RWMutex
	waitForStartedVMArgsForCall []struct {
		instanceName string
	}
	waitForStartedVMReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClientAPI) CreateVM(instance ec2.Instance, ami string, instanceType string, newName string) (*ec2.Instance, error) {
	fake.createVMMutex.Lock()
	fake.createVMArgsForCall = append(fake.createVMArgsForCall, struct {
		instance     ec2.Instance
		ami          string
		instanceType string
		newName      string
	}{instance, ami, instanceType, newName})
	fake.recordInvocation("CreateVM", []interface{}{instance, ami, instanceType, newName})
	fake.createVMMutex.Unlock()
	if fake.CreateVMStub != nil {
		return fake.CreateVMStub(instance, ami, instanceType, newName)
	} else {
		return fake.createVMReturns.result1, fake.createVMReturns.result2
	}
}

func (fake *FakeClientAPI) CreateVMCallCount() int {
	fake.createVMMutex.RLock()
	defer fake.createVMMutex.RUnlock()
	return len(fake.createVMArgsForCall)
}

func (fake *FakeClientAPI) CreateVMArgsForCall(i int) (ec2.Instance, string, string, string) {
	fake.createVMMutex.RLock()
	defer fake.createVMMutex.RUnlock()
	return fake.createVMArgsForCall[i].instance, fake.createVMArgsForCall[i].ami, fake.createVMArgsForCall[i].instanceType, fake.createVMArgsForCall[i].newName
}

func (fake *FakeClientAPI) CreateVMReturns(result1 *ec2.Instance, result2 error) {
	fake.CreateVMStub = nil
	fake.createVMReturns = struct {
		result1 *ec2.Instance
		result2 error
	}{result1, result2}
}

func (fake *FakeClientAPI) DeleteVM(instance ec2.Instance) error {
	fake.deleteVMMutex.Lock()
	fake.deleteVMArgsForCall = append(fake.deleteVMArgsForCall, struct {
		instance ec2.Instance
	}{instance})
	fake.recordInvocation("DeleteVM", []interface{}{instance})
	fake.deleteVMMutex.Unlock()
	if fake.DeleteVMStub != nil {
		return fake.DeleteVMStub(instance)
	} else {
		return fake.deleteVMReturns.result1
	}
}

func (fake *FakeClientAPI) DeleteVMCallCount() int {
	fake.deleteVMMutex.RLock()
	defer fake.deleteVMMutex.RUnlock()
	return len(fake.deleteVMArgsForCall)
}

func (fake *FakeClientAPI) DeleteVMArgsForCall(i int) ec2.Instance {
	fake.deleteVMMutex.RLock()
	defer fake.deleteVMMutex.RUnlock()
	return fake.deleteVMArgsForCall[i].instance
}

func (fake *FakeClientAPI) DeleteVMReturns(result1 error) {
	fake.DeleteVMStub = nil
	fake.deleteVMReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClientAPI) GetVMInfo(name string) (*ec2.Instance, error) {
	fake.getVMInfoMutex.Lock()
	fake.getVMInfoArgsForCall = append(fake.getVMInfoArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetVMInfo", []interface{}{name})
	fake.getVMInfoMutex.Unlock()
	if fake.GetVMInfoStub != nil {
		return fake.GetVMInfoStub(name)
	} else {
		return fake.getVMInfoReturns.result1, fake.getVMInfoReturns.result2
	}
}

func (fake *FakeClientAPI) GetVMInfoCallCount() int {
	fake.getVMInfoMutex.RLock()
	defer fake.getVMInfoMutex.RUnlock()
	return len(fake.getVMInfoArgsForCall)
}

func (fake *FakeClientAPI) GetVMInfoArgsForCall(i int) string {
	fake.getVMInfoMutex.RLock()
	defer fake.getVMInfoMutex.RUnlock()
	return fake.getVMInfoArgsForCall[i].name
}

func (fake *FakeClientAPI) GetVMInfoReturns(result1 *ec2.Instance, result2 error) {
	fake.GetVMInfoStub = nil
	fake.getVMInfoReturns = struct {
		result1 *ec2.Instance
		result2 error
	}{result1, result2}
}

func (fake *FakeClientAPI) StopVM(instance ec2.Instance) error {
	fake.stopVMMutex.Lock()
	fake.stopVMArgsForCall = append(fake.stopVMArgsForCall, struct {
		instance ec2.Instance
	}{instance})
	fake.recordInvocation("StopVM", []interface{}{instance})
	fake.stopVMMutex.Unlock()
	if fake.StopVMStub != nil {
		return fake.StopVMStub(instance)
	} else {
		return fake.stopVMReturns.result1
	}
}

func (fake *FakeClientAPI) StopVMCallCount() int {
	fake.stopVMMutex.RLock()
	defer fake.stopVMMutex.RUnlock()
	return len(fake.stopVMArgsForCall)
}

func (fake *FakeClientAPI) StopVMArgsForCall(i int) ec2.Instance {
	fake.stopVMMutex.RLock()
	defer fake.stopVMMutex.RUnlock()
	return fake.stopVMArgsForCall[i].instance
}

func (fake *FakeClientAPI) StopVMReturns(result1 error) {
	fake.StopVMStub = nil
	fake.stopVMReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClientAPI) AssignPublicIP(instance ec2.Instance, ip string) error {
	fake.assignPublicIPMutex.Lock()
	fake.assignPublicIPArgsForCall = append(fake.assignPublicIPArgsForCall, struct {
		instance ec2.Instance
		ip       string
	}{instance, ip})
	fake.recordInvocation("AssignPublicIP", []interface{}{instance, ip})
	fake.assignPublicIPMutex.Unlock()
	if fake.AssignPublicIPStub != nil {
		return fake.AssignPublicIPStub(instance, ip)
	} else {
		return fake.assignPublicIPReturns.result1
	}
}

func (fake *FakeClientAPI) AssignPublicIPCallCount() int {
	fake.assignPublicIPMutex.RLock()
	defer fake.assignPublicIPMutex.RUnlock()
	return len(fake.assignPublicIPArgsForCall)
}

func (fake *FakeClientAPI) AssignPublicIPArgsForCall(i int) (ec2.Instance, string) {
	fake.assignPublicIPMutex.RLock()
	defer fake.assignPublicIPMutex.RUnlock()
	return fake.assignPublicIPArgsForCall[i].instance, fake.assignPublicIPArgsForCall[i].ip
}

func (fake *FakeClientAPI) AssignPublicIPReturns(result1 error) {
	fake.AssignPublicIPStub = nil
	fake.assignPublicIPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClientAPI) WaitForStartedVM(instanceName string) error {
	fake.waitForStartedVMMutex.Lock()
	fake.waitForStartedVMArgsForCall = append(fake.waitForStartedVMArgsForCall, struct {
		instanceName string
	}{instanceName})
	fake.recordInvocation("WaitForStartedVM", []interface{}{instanceName})
	fake.waitForStartedVMMutex.Unlock()
	if fake.WaitForStartedVMStub != nil {
		return fake.WaitForStartedVMStub(instanceName)
	} else {
		return fake.waitForStartedVMReturns.result1
	}
}

func (fake *FakeClientAPI) WaitForStartedVMCallCount() int {
	fake.waitForStartedVMMutex.RLock()
	defer fake.waitForStartedVMMutex.RUnlock()
	return len(fake.waitForStartedVMArgsForCall)
}

func (fake *FakeClientAPI) WaitForStartedVMArgsForCall(i int) string {
	fake.waitForStartedVMMutex.RLock()
	defer fake.waitForStartedVMMutex.RUnlock()
	return fake.waitForStartedVMArgsForCall[i].instanceName
}

func (fake *FakeClientAPI) WaitForStartedVMReturns(result1 error) {
	fake.WaitForStartedVMStub = nil
	fake.waitForStartedVMReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClientAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createVMMutex.RLock()
	defer fake.createVMMutex.RUnlock()
	fake.deleteVMMutex.RLock()
	defer fake.deleteVMMutex.RUnlock()
	fake.getVMInfoMutex.RLock()
	defer fake.getVMInfoMutex.RUnlock()
	fake.stopVMMutex.RLock()
	defer fake.stopVMMutex.RUnlock()
	fake.assignPublicIPMutex.RLock()
	defer fake.assignPublicIPMutex.RUnlock()
	fake.waitForStartedVMMutex.RLock()
	defer fake.waitForStartedVMMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeClientAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ aws.ClientAPI = new(FakeClientAPI)
